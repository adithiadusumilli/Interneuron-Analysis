function [transitionTimes, activePeriods] = peakTimePoints(emgFile, useMedian, buffer, baselineDur)
% code to find all time points where emg transitions from inactive (baseline) to active
% after sustained period of low muscle activity (inactivity)

% inputs:
%   emgFile       — path to EMG1ms.mat (must contain downsampEMG)
%   useMedian     — if true, uses median baseline + buffer as threshold (default: true)
%   buffer        — value added to median to define threshold (default: 10)
%   baselineDur   — min duration in ms below threshold before detecting spike (default: 200)

% outputs:
%   transitionTimes — array of time indices (in ms) when emg transitions from baseline to above threshold
%   activePeriods   — cell array of index ranges for all emg activation periods

    if nargin < 2, useMedian = true; end
    if nargin < 3, buffer = 10; end
    if nargin < 4, baselineDur = 200; end

    % load downsampEMG from file
    load(emgFile, 'downsampEMG');
    if isrow(downsampEMG)
        downsampEMG = downsampEMG';  % ensure it's a column vector
    end

    fs = 1000;  % frequency of sampling to set resolution
    nPoints = length(downsampEMG);  % total number of samples

    % calculate threshold
    if useMedian
        baseline = downsampEMG(1:min(10*fs, nPoints));  % first 10 seconds
        baseMedian = median(baseline);
        threshold = baseMedian + buffer;
        fprintf('using dynamic threshold: median = %.2f + buffer = %.2f → threshold = %.2f\n', baseMedian, buffer, threshold);
    else
        threshold = 50;
        fprintf('using fixed threshold: %.2f\n', threshold);
    end

    % initialize outputs and scanning index
    transitionTimes = [];
    activePeriods = {};
    i = 1;

    % outer loop to step through emg to find baseline → activation transitions
    while i <= nPoints - baselineDur

        % check for a baseline window of at least baselineDur ms
        if all(downsampEMG(i:i+baselineDur-1) < threshold)

            % look forward to find the first value above threshold (start of activity)
            j = i + baselineDur;
            while j <= nPoints && downsampEMG(j) < threshold
                j = j + 1;
            end

            % if activation was found, store the first spike index
            if j <= nPoints
                transitionTimes(end+1) = j;  % store single transition point

                % new code block: find full duration of this active period
                k = j + 1;
                % look forward until next sustained inactivity (below threshold for baselineDur)
                while k <= nPoints - baselineDur
                    if all(downsampEMG(k:k+baselineDur-1) < threshold)
                        break;  % end of active period found
                    end
                    k = k + 1;
                end

                % store all indices during this active period
                activeEnd = min(k-1, nPoints);
                activePeriods{end+1} = j:activeEnd;  % save range of active values

                % skip forward to after this active bout ends
                i = activeEnd + baselineDur;
                continue;
            end
        end

        % move forward by 1 ms if no transition found
        i = i + 1;
    end

    % print results
    fprintf('detected %d emg transitions from baseline to activity.\n', length(transitionTimes));
    if ~isempty(transitionTimes)
        disp('first few transition times (ms):');
        disp(transitionTimes(1:min(10, end)));
    end
end
