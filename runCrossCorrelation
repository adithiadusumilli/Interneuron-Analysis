function runCrossCorrelation(baseDirs, classificationFile)
% computing and plotting timing offsets between average
% interneuron and pyramidal activity for both cortex and striatum

% parameters
binSize = 0.01; % considering 10 ms bins
maxLagSecs = 1;
maxLagBins = round(maxLagSecs / binSize);

% load in classification data
load(classificationFile, 'classifications', 'regions');

peakLags = nan(length(baseDirs), length(regions));

for iRegion = 1:length(regions)
    regionName = regions{iRegion};

    for iDir = 1:length(baseDirs)
        baseDir = baseDirs{iDir};
        fprintf('\nProcessing %s — Session %d: %s\n', regionName, iDir, baseDir);

        % load data
        neuronFile = fullfile(baseDir, 'neuronDataStruct.mat');
        frFile = fullfile(baseDir, 'NeuralFiringRates10msBins30msGauss.mat');

        if ~isfile(neuronFile) || ~isfile(frFile)
            warning('Missing files in %s. Skipping.', baseDir);
            continue;
        end

        load(neuronFile, 'neuronDataStruct');
        load(frFile, 'cortexFRs', 'cortexInds', 'striatumFRs', 'striatumInds');

        % get appropriate data based on region
        if iRegion == 1
            frMatrix = cortexFRs;
            regionInds = cortexInds;
        else
            frMatrix = striatumFRs;
            regionInds = striatumInds;
        end

        classArray = classifications{iDir, iRegion};
        if isempty(classArray)
            warning('No classification data for session %d (%s). Skipping.', iDir, regionName);
            continue;
        end

        % retrieving only relevant classifications
        regionClass = classArray(regionInds);

        % splitting firing rates by class
        interneuronFRs = frMatrix(regionClass == 1, :);
        pyramidalFRs   = frMatrix(regionClass == 0, :);

        if isempty(interneuronFRs) || isempty(pyramidalFRs)
            warning('No valid interneuron or pyramidal data in session %d (%s). Skipping.', iDir, regionName);
            continue;
        end

        fprintf('  → # Interneurons: %d\n', size(interneuronFRs, 1));
        fprintf('  → # Pyramidal Neurons: %d\n', size(pyramidalFRs, 1));

        % debug: Shape of firing rate matrices
        fprintf('  → Interneuron FRs size: [%d x %d]\n', size(interneuronFRs));
        fprintf('  → Pyramidal FRs size:   [%d x %d]\n', size(pyramidalFRs));

        % preview average time series
        meanInt = nanmean(interneuronFRs, 1); 
        meanPyr = nanmean(pyramidalFRs, 1);  

        figure('Name', sprintf('%s — Avg Time Series — Session %d', regionName, iDir), 'Color', 'w');
        plot(meanInt, 'r'); hold on;
        plot(meanPyr, 'b');
        legend('Interneurons', 'Pyramidal Neurons');
        title(sprintf('Population Avg — %s — Session %d', regionName, iDir));
        xlabel('Time Bin');
        ylabel('Firing Rate (Hz?)');
        drawnow;

        % finding avgs across neuron type
        meanInt = nanmean(interneuronFRs, 1);
        meanPyr = nanmean(pyramidalFRs, 1);

        % cross-correlation computing
        [xc, lags] = xcorr(meanInt, meanPyr, maxLagBins, 'coeff');

        [~, peakIdx] = max(xc);
        peakLag = lags(peakIdx) * binSize;
        peakLags(iDir, iRegion) = peakLag;

        % plot
        figure('Name', sprintf('%s — Session %d', regionName, iDir), 'Color', 'w');
        plot(lags * binSize, xc, 'k', 'LineWidth', 2);
        hold on;
        line([peakLag peakLag], get(gca, 'ylim'), 'LineStyle', '--', 'Color', 'r');
        xlabel('Lag (seconds)');
        ylabel('Correlation');
        title(sprintf('%s — Session %d — Peak Lag: %.3f sec', regionName, iDir, peakLag));
        box off;
        drawnow;

        fprintf('→ %s — Session %d Peak Lag: %.3f seconds\n', regionName, iDir, peakLag);
    end
end

% print summary
fprintf('\n========== Summary of Peak Lags (in seconds) ==========\n');
for iRegion = 1:length(regions)
    fprintf('%s:\n', regions{iRegion});
    disp(peakLags(:, iRegion));
end

end
