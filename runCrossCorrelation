function runCrossCorrelation(baseDirs, classificationFile)
% function manually computes cross-correlation between interneuron
% and pyramidal population activity for cortex and striatum & properly handles nans

binSize = 0.01;       % 10 ms bins
maxLagSecs = 1;
maxLagBins = round(maxLagSecs / binSize);

peakLags = nan(length(baseDirs), length(regions));

for iRegion = 1:length(regions)
    regionName = regions{iRegion};

    for iDir = 1:length(baseDirs)
        baseDir = baseDirs{iDir};
        fprintf('\nProcessing %s — Session %d: %s\n', regionName, iDir, baseDir);

        classificationPath = fullfile(baseDir, classificationFile);

        if ~isfile(classificationPath)
            warning('Missing classification file in %s. Skipping.', classificationPath);
            continue;
        end

        load(classificationPath, 'classifications', 'regions');

        neuronFile = fullfile(baseDir, 'neuronDataStruct.mat');
        frFile = fullfile(baseDir, 'NeuralFiringRates10msBins30msGauss.mat');

        if ~isfile(neuronFile) || ~isfile(frFile)
            warning('Missing files in %s. Skipping.', baseDir);
            continue;
        end

        load(neuronFile, 'neuronDataStruct');
        load(frFile, 'cortexFRs', 'cortexInds', 'striatumFRs', 'striatumInds');

        % retrieving region-specific data
        if iRegion == 1
            frMatrix = cortexFRs;
            regionInds = cortexInds;
        else
            frMatrix = striatumFRs;
            regionInds = striatumInds;
        end

        neuronType = classifications{iDir, iRegion};
        if isempty(neuronType)
            warning('No classification data for session %d (%s). Skipping.', iDir, regionName);
            continue;
        end

        regionClass = neuronType(regionInds);
        interneuronFRs = frMatrix(regionClass == 1, :);
        pyramidalFRs   = frMatrix(regionClass == 0, :);

        if isempty(interneuronFRs) || isempty(pyramidalFRs)
            warning('No valid interneuron or pyramidal data in session %d (%s). Skipping.', iDir, regionName);
            continue;
        end

        % calculating raw mean time series
        meanInt = nanmean(interneuronFRs, 1);
        meanPyr = nanmean(pyramidalFRs, 1);

        % finding all NaN indices
        nanInt = find(isnan(meanInt));
        nanPyr = find(isnan(meanPyr));
        allNanIdx = unique([nanInt, nanPyr]);

        % removing nan indices from both population time series
        meanInt(allNanIdx) = [];
        meanPyr(allNanIdx) = [];

        % manual cross-correlation
        lags = -maxLagBins:maxLagBins;
        xc = nan(size(lags));

        for li = 1:length(lags)
            lag = lags(li);

            if lag < 0
                % Shift left (int leads)
                intSeg = meanInt(1:end+lag);
                pyrSeg = meanPyr(1-lag:end);
            elseif lag > 0
                % Shift right (pyr leads)
                intSeg = meanInt(1+lag:end);
                pyrSeg = meanPyr(1:end-lag);
            else
                intSeg = meanInt;
                pyrSeg = meanPyr;
            end

            if length(intSeg) > 2
                xc(li) = corr(intSeg', pyrSeg');
            end
        end

        % finding peak
        [~, peakIdx] = max(xc);
        peakLag = lags(peakIdx) * binSize;
        peakLags(iDir, iRegion) = peakLag;

        % Plot
        figure('Name', sprintf('%s — Session %d', regionName, iDir), 'Color', 'w');
        plot(lags * binSize, xc, 'k', 'LineWidth', 2);
        hold on;
        line([peakLag peakLag], get(gca, 'ylim'), 'LineStyle', '--', 'Color', 'r');
        xlabel('Lag (seconds)');
        ylabel('Correlation');
        title(sprintf('%s — Session %d — Peak Lag: %.3f sec', regionName, iDir, peakLag));
        box off;
        drawnow;

        fprintf('→ %s — Session %d Peak Lag: %.3f seconds\n', regionName, iDir, peakLag);
    end
end

% outputting final summary
fprintf('\n========== Summary of Peak Lags (in seconds) ==========\n');
for iRegion = 1:length(regions)
    fprintf('%s:\n', regions{iRegion});
    disp(peakLags(:, iRegion));
end

end
