function extractEMGandNeuralWindows(folderPath, threshold, baselineDur, minSeparation, preSamples, postSamples)
% combines EMG event extraction and neural window extraction around EMG transitions
% also separates neural activity by cell type (pyramidal vs interneurons)

% inputs:
%   folderPath     — session folder with EMG, neural, and sync data
%   threshold      — activation threshold value (e.g., 100)
%   baselineDur    — minimum quiet period (in ms) before activation (default: 200)
%   minSeparation  — minimum ms between separate events (default: 500)
%   preSamples     — # of ms to include before each transition
%   postSamples    — # of ms to include after each transition

    if nargin < 3, baselineDur = 200; end
    if nargin < 4, minSeparation = 500; end
    if nargin < 5, preSamples = 100; end
    if nargin < 6, postSamples = 100; end

    load(fullfile(folderPath,'EMG1ms'), 'downsampEMG');  % must contain 8 × n matrix
    [nChannels, nPoints] = size(downsampEMG);
    fs = 1000;  % 1 kHz sampling rate

    % 8-cell holders for EMG and neural results
    validTransitionsCell = cell(nChannels,1); % {ch} = [events]
    emgWindowsCell = cell(nChannels,1); % {ch} = events × 8 × timePts
    tAxis = (-preSamples:postSamples); % common time vector
    validTransitionsNeurCell = cell(nChannels,1); % {ch} = synced neural indices
    pyrCxWinCell = cell(nChannels,1); % {ch} = events × neurons × time
    intCxWinCell = cell(nChannels,1);
    pyrStrWinCell = cell(nChannels,1);
    intStrWinCell = cell(nChannels,1);

    % load shared neural data
    load(fullfile(folderPath,'VideoSyncFrames.mat'), 'frameEMGSamples', 'frameNeuropixelSamples');    % sync frames
    load(fullfile(folderPath,'NeuralFiringRates1msBins10msGauss.mat'), 'cortexFRs', 'cortexInds', 'striatumFRs', 'striatumInds'); % firing rates
    conslidatedDataFoler = 'X:\David\AnalysesData';
    load(fullfile(conslidatedDataFoler, 'AA_classifications.mat'), 'classifications');

    % define known base folders (match order used when AA_classifications.mat was created)
    animalFolders = {
        'X:\David\ArenaRecordings\D026-032923-ArenaRecording\ProcessedData', ...
        'Z:\David\ArenaRecordings\NeuropixelsTest\D020-062922-ArenaRecording\ProcessedData', ...
        'Z:\David\ArenaRecordings\NeuropixelsTest\D024-111022-ArenaRecording\ProcessedData'
    };

    % determine which animal this folderPath corresponds to
    matchRow = find(contains(animalFolders, folderPath), 1);
    if isempty(matchRow)
        error('Could not match folderPath to an entry in animalFolders. Please check the list.');
    end
    classifications = classifications(matchRow, :); % extract classification for this animal only

    % pre-extract region×type matrices (constant for all channels)
    cortexPyr = cortexFRs(classifications{1,1}(cortexInds)==0 , :);
    cortexInt = cortexFRs(classifications{1,1}(cortexInds)==1 , :);
    striatPyr = striatumFRs(classifications{1,2}(striatumInds)==0 , :);
    striatInt = striatumFRs(classifications{1,2}(striatumInds)==1 , :);

    % container for all 8 channels (each cell holds a struct of results)
    allChannels = cell(1, nChannels);

    % storage for shifted EMG transition indices (8x100 cell)
    validTransitionsShiftedCell = cell(nChannels, 100);

    % storing shifted neural results
    validTransitionsNeurShiftedCell = cell(nChannels, 101); % 1 original + 100 shifts
    pyrCxWinShiftedCell  = cell(nChannels, 101); % change to 2 for 1 shift (and 1 unshifted)
    intCxWinShiftedCell  = cell(nChannels, 101); % change to 2 for 1 shift (and 1 unshifted)
    pyrStrWinShiftedCell = cell(nChannels, 101); % change to 2 for 1 shift (and 1 unshifted)
    intStrWinShiftedCell = cell(nChannels, 101); % change to 2 for 1 shift (and 1 unshifted)

    % main loop over emg channels
    for ch = 1:nChannels
        signal = downsampEMG(ch, :);  % get emg signal for current channel

        % apply threshold to find where signal is above threshold
        above = signal > threshold;
        transitionPoints = find(diff([0, above]) == 1);

        % remove transitions that are too close together (< minSeparation)
        if numel(transitionPoints) > 1
            diffs = diff(transitionPoints);
            keepers = [true, diffs > minSeparation];
            transitionPoints = transitionPoints(keepers);
        end

        % filter out threshold crossings that do not have quiet baseline before
        validTransitions = [];
        for i = 1:numel(transitionPoints)
            idx = transitionPoints(i);
            if idx > baselineDur && all(signal(idx-baselineDur:idx-1) < threshold)
                validTransitions(end+1) = idx;
            end
        end
        validTransitionsCell{ch} = validTransitions;

        % extract EMG windows for both unshifted and shifted transitions
        nShifts = 100; % change to 1 for 1 shift
        minShift = 30000;  % 30 sec in ms
        emgWindowsShiftedCell = cell(nChannels, nShifts);  % 8 × 100 cell
        totalLength = nPoints;

        for s = 1:(nShifts + 1)
            if s == 1
                currentTransitions = validTransitions;
            else
                while true
                    randShift = randi([minShift, totalLength - minShift]);
                    if rand() > 0.5
                        randShift = -randShift;
                    end
                    shifted = validTransitions + randShift;

                    % wrap around: subtract totalLength + 1 if index exceeds nPoints
                    shifted(shifted > totalLength) = shifted(shifted > totalLength) - (totalLength + 1);
                    shifted(shifted < 1) = shifted(shifted < 1) + totalLength;

                    % check that they're sufficiently distant from original
                    if all(abs(shifted - validTransitions) >= minShift)
                        currentTransitions = shifted;
                        break;
                    end
                end
                validTransitionsShiftedCell{ch, s - 1} = currentTransitions;
            end

            % extract sample windows for this s
            nEvt = numel(currentTransitions);
            winLen = preSamples + postSamples + 1;
            emgWin = nan(nEvt, nChannels, winLen);   % events × 8 muscles × time

            for e = 1:nEvt
                idx = currentTransitions(e);
                if idx > preSamples && idx + postSamples <= nPoints
                    emgWin(e,:,:) = downsampEMG(:, idx-preSamples:idx+postSamples);
                end
            end

            if s == 1
                emgWindowsCell{ch} = emgWin;
            else
                emgWindowsShiftedCell{ch, s - 1} = emgWin;
            end
        end

        % plot emg signal and mark detected threshold crossings
        figure('Name', sprintf('emg channel %d', ch));
        plot(signal); hold on;
        plot(validTransitions, signal(validTransitions), 'r*');
        title(sprintf('channel %d emg with detected transitions', ch));
        xlabel('time (ms)'); ylabel('emg amplitude'); hold off;

        % ----------------------- now extracting neural windows below -----------------------

        for s = 1:(nShifts + 1)
            if s == 1
                transitions = validTransitions;
            else
                transitions = validTransitionsShiftedCell{ch, s - 1};
            end

            % sync to neural time
            cd(folderPath);
            neuralIndices = NeurEMGSync(transitions * 20, frameEMGSamples, frameNeuropixelSamples, 'EMG');
            cd(currentDir);
            neuralIndices1kHz = round(neuralIndices / 30);
            validTransitionsNeurShiftedCell{ch, s} = neuralIndices1kHz;

            % allocate matrices
            nEvt   = length(neuralIndices1kHz);
            tAxis  = (-preSamples : postSamples);
            nTPnts = numel(tAxis);

            pyrCxWin   = nan(nEvt, size(cortexPyr,1),   nTPnts);
            pyrStrWin  = nan(nEvt, size(striatPyr,1),   nTPnts);
            intCxWin   = nan(nEvt, size(cortexInt,1),   nTPnts);
            intStrWin  = nan(nEvt, size(striatInt,1),   nTPnts);

            for e = 1:nEvt
                t = neuralIndices1kHz(e);
                if isnan(t) || t - preSamples < 1 || t + postSamples > size(cortexFRs,2)
                    continue;
                end
                rng = (t - preSamples):(t + postSamples);
                if any(rng < 1) || any(rng > size(cortexFRs,2)), continue; end
                pyrCxWin(e,:,:)  = cortexPyr(:,  rng);
                pyrStrWin(e,:,:) = striatPyr(:, rng);
                intCxWin(e,:,:)  = cortexInt(:, rng);
                intStrWin(e,:,:) = striatInt(:, rng);
            end

            pyrCxWinShiftedCell{ch, s}  = pyrCxWin;
            intCxWinShiftedCell{ch, s}  = intCxWin;
            pyrStrWinShiftedCell{ch, s} = pyrStrWin;
            intStrWinShiftedCell{ch, s} = intStrWin;

            if s == 1
                validTransitionsNeurCell{ch} = neuralIndices1kHz;
                pyrCxWinCell{ch}  = pyrCxWin;
                intCxWinCell{ch}  = intCxWin;
                pyrStrWinCell{ch} = pyrStrWin;
                intStrWinCell{ch} = intStrWin;
                allChannels{ch} = struct('neuralIndices1kHz', neuralIndices1kHz, 'pyrCx', pyrCxWin, 'pyrStr', pyrStrWin, 'intCx', intCxWin, 'intStr', intStrWin, 'tAxis', tAxis);
            end
        end
    end

    % save everything together
    save(fullfile(folderPath,'EMG_Neural_AllChannels.mat'), 'validTransitionsCell','validTransitionsNeurCell','validTransitionsShiftedCell','validTransitionsNeurShiftedCell', 'emgWindowsCell','emgWindowsShiftedCell', 'pyrCxWinCell','intCxWinCell','pyrStrWinCell','intStrWinCell', 'pyrCxWinShiftedCell','intCxWinShiftedCell','pyrStrWinShiftedCell','intStrWinShiftedCell', 'allChannels','preSamples','postSamples','threshold','baselineDur','minSeparation','tAxis','-v7.3');
end
