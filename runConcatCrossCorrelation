function runConcatCrossCorrelation(animalFolder)
% computes cross-correlation between concatenated pyramidal and interneuron activity windows around emg transitions (−500 to +500 ms) per animal
% inserts nan padding between windows to prevent cross-window contamination during shifting
% performs control analysis w 100 shifted interneuron traces
% saves lag vector, xc vals, peak lag, and control bounds into .mat file

% load emg-triggered neural activity
load(fullfile(animalFolder, 'EMG_Neural_AllChannels.mat'), 'pyrCxWinCell', 'intCxWinCell', 'validTransitionsCell', 'tAxis');

channelsToUse = 1:4;
binSize = 0.001; 
maxLagSecs = 0.5;
maxLagBins = round(maxLagSecs / binSize);
lags = -maxLagBins:maxLagBins;

% define padding to prevent segment overlap during shift
nanGap = maxLagBins + 3;
nanPad = nan(1, nanGap);

% initialize concatenated time series
pyrConcat = [];
intConcat = [];

for ch = channelsToUse
    pyr = pyrCxWinCell{ch};  
    int = intCxWinCell{ch};

    pyrMean = squeeze(mean(pyr, 2, 'omitnan'));
    intMean = squeeze(mean(int, 2, 'omitnan'));

    for evt = 1:size(pyrMean,1)
        pyrConcat = [pyrConcat, pyrMean(evt,:), nanPad];
        intConcat = [intConcat, intMean(evt,:), nanPad];
    end
end

% xc over lags (removing nans after shift)
xc = nan(size(lags));
for i = 1:length(lags)
    lag = lags(i);
    if lag < 0
        intSeg = intConcat(1:end+lag);
        pyrSeg = pyrConcat(1-lag:end);
    elseif lag > 0
        intSeg = intConcat(1+lag:end);
        pyrSeg = pyrConcat(1:end-lag);
    else
        intSeg = intConcat;
        pyrSeg = pyrConcat;
    end

    % remove indices where either is nan
    validIdx = ~isnan(intSeg) & ~isnan(pyrSeg);
    if sum(validIdx) > 10
        xc(i) = corr(intSeg(validIdx)', pyrSeg(validIdx)');
    end
end

% find peak lag from main curve
[~, peakIdx] = max(xc);
peakLagSec = lags(peakIdx) * binSize;

% control: 100 random circ shifts of interneuron signal
numShifts = 100;
controlCorrs = nan(1, numShifts);

for s = 1:numShifts
    shiftAmt = randi([round(30 / binSize), length(intConcat) - round(30 / binSize)]);
    intShifted = circshift(intConcat, shiftAmt);

    % remove nans only after shift
    validIdx = ~isnan(intShifted) & ~isnan(pyrConcat);
    if sum(validIdx) > 10
        controlCorrs(s) = corr(intShifted(validIdx)', pyrConcat(validIdx)');
    end
end

% calculate % bounds
prc2_5 = prctile(controlCorrs, 2.5);
prc97_5 = prctile(controlCorrs, 97.5);

% save results
save(fullfile(animalFolder, 'concatCrossCorrResult.mat'), ...
    'lags', 'binSize', 'xc', 'peakLagSec', 'prc2_5', 'prc97_5');

% plot
figure('Name', 'Concatenated Cross-Correlation', 'Color', 'w');
plot(lags * binSize, xc, 'k', 'LineWidth', 2); hold on;
xline(peakLagSec, 'r--', sprintf('Peak Lag = %.3f s', peakLagSec));
yline(prc2_5, '--', 'Color', [0.5 0.5 0.5], 'LineWidth', 1.2);
yline(prc97_5, '--', 'Color', [0.5 0.5 0.5], 'LineWidth', 1.2);
xlabel('Lag (s)');
ylabel('Correlation');
title('Cross-Correlation: Interneuron vs Pyramidal (Concatenated Windows)');
legend('Cross-corr', 'Peak Lag', '2.5% Control', '97.5% Control', 'Location', 'best');
grid on;
box off;

fprintf('→ %s\nSaved lagged xcorr + control shift percentiles\nPeak Lag = %.3f s\n', animalFolder, peakLagSec);
end
