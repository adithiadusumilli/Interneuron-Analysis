function plotEMGandNeuralAverages(dataFile, channelsToUse)
%  plots mean ± sem traces for emg, cortex-pyramidal, cortex-interneuron, striatum-pyramidal, and striatum-interneuron
%  data come from the output of extractEMGandNeuralWindows
%  only events originating from the specified emg channels are pooled.

%  inputs
%    datafile       : full path to 'emg_neural_allchannels.mat'
%    channelstouse  : vector with channel indices to pool (default = 1:4)

    if nargin < 2, channelsToUse = 1:4; end          % default: use channels 1-4

    % add shadederrorbar (edit the path if you keep it elsewhere)
    sep = 'c:\github\interneuron-analysis';
    fcn = fullfile(sep,'shadedErrorBar.m');
    if exist(fcn,'file'), addpath(genpath(sep)); end

    % load the variables saved by extractEMGandNeuralWindows
    S = load(dataFile , ...
             'emgWindowsCell','pyrCxWinCell','intCxWinCell', ...
             'pyrStrWinCell','intStrWinCell','tAxis');

    % 1. pool events from the requested emg channels
    emgPool     = [];   % events × time
    pyrCxPool   = [];   % events × neurons × time
    intCxPool   = [];
    pyrStrPool  = [];
    intStrPool  = [];

    for ch = channelsToUse
        % grab emg windows for this channel → keep only the triggering muscle (dim-2 = ch)
        emgChunk = squeeze( S.emgWindowsCell{ch}(:, ch, :) );    % (events × time)
        emgPool  = cat(1, emgPool, emgChunk);                    % concatenate along events

        % concatenate neural windows along the event dimension
        pyrCxPool   = cat(1 , pyrCxPool  , S.pyrCxWinCell{ch});  % (events × neurons × time)
        intCxPool   = cat(1 , intCxPool  , S.intCxWinCell{ch});
        pyrStrPool  = cat(1 , pyrStrPool , S.pyrStrWinCell{ch});
        intStrPool  = cat(1 , intStrPool , S.intStrWinCell{ch});
    end

    % 2. compute mean & sem for emg  (events × time)
    mEMG  = mean(emgPool , 1 , 'omitnan');
    seEMG = std (emgPool , 0 , 1 , 'omitnan') ./ sqrt(size(emgPool,1));

    % 3. compute mean & sem for neural traces
    %    – first average across neurons for each event,
    %      then compute grand mean/sem across those event-means
    meanEvt = @(M) squeeze( mean(M, 2 , 'omitnan') ); % helper: avg over neurons → (events × time)
    grandMS = @(E) deal( mean(E,1,'omitnan'), std (E,0,1,'omitnan')./sqrt(size(E,1)) );

    [mPyrCx , sePyrCx]   = grandMS( meanEvt(pyrCxPool)  );
    [mIntCx , seIntCx]   = grandMS( meanEvt(intCxPool)  );
    [mPyrStr, sePyrStr]  = grandMS( meanEvt(pyrStrPool) );
    [mIntStr, seIntStr]  = grandMS( meanEvt(intStrPool) );

    % 4. plot with tiledlayout  (2 rows × 3 columns)
    figure('Name','averaged emg + neural responses','Color','w');
    tl = tiledlayout(2,3,'TileSpacing','tight','Padding','compact');

    nexttile; shadedErrorBar(S.tAxis, mEMG , seEMG , 'lineProps',{'k','linewidth',1.4});
    title('cortex emg'); ylabel('mean ± sem'); xlabel('time (ms)');

    nexttile; shadedErrorBar(S.tAxis, mPyrCx , sePyrCx , 'lineProps',{'b','linewidth',1.4});
    title('cortex pyramidal'); xlabel('time (ms)');

    nexttile; shadedErrorBar(S.tAxis, mIntCx , seIntCx , 'lineProps',{'r','linewidth',1.4});
    title('cortex interneuron'); xlabel('time (ms)');

    nexttile; shadedErrorBar(S.tAxis, mEMG , seEMG , 'lineProps',{'k','linewidth',1.4});
    title('striatum emg'); ylabel('mean ± sem'); xlabel('time (ms)');

    nexttile; shadedErrorBar(S.tAxis, mPyrStr , sePyrStr , 'lineProps',{'b','linewidth',1.4});
    title('striatum pyramidal'); xlabel('time (ms)');

    nexttile; shadedErrorBar(S.tAxis, mIntStr , seIntStr , 'lineProps',{'r','linewidth',1.4});
    title('striatum interneuron'); xlabel('time (ms)');

    sgtitle(sprintf('averaged responses for emg channels [%s]', num2str(channelsToUse)));
end
