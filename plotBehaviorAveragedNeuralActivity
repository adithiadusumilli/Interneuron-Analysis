function plotBehaviorAveragedNeuralActivity(folderPath, channelsToUse)
% plots average cortex activity per behavior type with 95% shifted controls
% uses emg-triggered neural windows and transition-behavior label mapping
% inputs:
%     folderPath - path to folder with EMG_Neural_AllChannels.mat and transitionBehaviorLabels.mat
%     channelsToUse - vector of muscle indices to use ([1 2 3 4] is common)

if nargin < 2, channelsToUse = 1:4; end

% add shadederrorbar
sep = 'c:\github\interneuron-analysis';
fcn = fullfile(sep,'shadedErrorBar.m');
if exist(fcn,'file'), addpath(genpath(sep)); end

% load neural and transition label data
load(fullfile(folderPath, 'EMG_Neural_AllChannels.mat'), 'pyrCxWinCell','intCxWinCell','pyrCxWinShiftedCell','intCxWinShiftedCell', 'pyrCxWinShiftedMeanCell','intCxWinShiftedMeanCell','tAxis','validTransitionsCell');

load(fullfile(folderPath, 'transitionBehaviorLabels.mat'), 'regionLabelsPerTransition','manualLabelsPerTransition');

% collect valid transitions and labels across selected channels
validTransitions = [];
regionLabels = [];
manualLabels = [];

for ch = channelsToUse
    validTransitions = [validTransitions; validTransitionsCell{ch}(:)];
    regionLabels = [regionLabels; regionLabelsPerTransition{ch}(:)];
    manualLabels = [manualLabels; manualLabelsPerTransition{ch}(:)];
end

% behavior values
umapVals = 1:7;
manualVals = 0:10;

% helper to extract and compute mean/sem for given behavior label
computeAverages = @(windows, neuronType) deal(mean(windows, 1, 'omitnan'), std(windows, 0, 1, 'omitnan') ./ sqrt(size(windows, 1)));

% ----------------- umap behavior plots -------------------
figure('Name','Cortex Neural by UMAP Region','Color','w');
tl = tiledlayout(2, 4, 'TileSpacing','tight', 'Padding','compact');

for b = umapVals
    % get mask for this behavior
    validLabels = find(regionLabels == b);

   % pool neural windows across selected channels and valid labels
    pyrPool = [];
    intPool = [];
    
    shiftPyr = [];
    shiftInt = [];

    for ch = channelsToUse
        trIdxs = validTransitionsCell{ch};

        mask = ismember(trIdxs, validTransitions(validLabels)); % mask = logical array (t/f vals) used to select or filter elements from another array

        pyrUnshift = squeeze(mean(pyrCxWinCell{ch}(mask,:,:), 2, 'omitnan'));
        intUnshift = squeeze(mean(intCxWinCell{ch}(mask,:,:), 2, 'omitnan'));
    
        pyrPool = [pyrPool; pyrUnshift];
        intPool = [intPool; intUnshift];

        % --- shifted pyramidal ---
        shift1Pyr = squeeze(mean(mean(pyrCxWinShiftedCell{ch}(mask,:,:), 2, 'omitnan'), 1, 'omitnan'));
        shift1Pyr = reshape(shift1Pyr, 1, []);  % ensure row vector
        pyrShiftCells = pyrCxWinShiftedMeanCell(ch, :);  % 1x99 cells
        pyrAllShifts = vertcat(shift1Pyr, pyrShiftCells{:});  % 100 x time

        % --- shifted interneuron ---
        shift1Int = squeeze(mean(mean(intCxWinShiftedCell{ch}(mask,:,:), 2, 'omitnan'), 1, 'omitnan'));
        shift1Int = reshape(shift1Int, 1, []);
        intShiftCells = intCxWinShiftedMeanCell(ch, :);
        intAllShifts = vertcat(shift1Int, intShiftCells{:});

        shiftPyr = [shiftPyr; pyrAllShifts];
        shiftInt = [shiftInt; intAllShifts];
    end

    [mPyr, sePyr] = computeAverages(pyrPool, 'pyr');
    [mInt, seInt] = computeAverages(intPool, 'int');

    pctPyr = prctile(shiftPyr, [2.5 97.5], 1);
    pctInt = prctile(shiftInt, [2.5 97.5], 1);

    nexttile(b); hold on;
    yyaxis left
    shadedErrorBar(tAxis, mPyr, sePyr, 'lineProps', {'b', 'LineWidth', 1.5});
    plot(tAxis, pctPyr(1,:), 'b--'); plot(tAxis, pctPyr(2,:), 'b--');
    ylabel('Pyramidal');

    yyaxis right
    shadedErrorBar(tAxis, mInt, seInt, 'lineProps', {'r', 'LineWidth', 1.5});
    plot(tAxis, pctInt(1,:), 'r--'); plot(tAxis, pctInt(2,:), 'r--');
    ylabel('Interneuron');

    title(sprintf('UMAP %d', b));
    xlabel('Time (ms)');
end

sgtitle('Cortex Neural Activity by UMAP Behavior (1–7)');

% ----------------- manual behavior plots -------------------
figure('Name','Cortex Neural by Manual Label','Color','w');
tl = tiledlayout(3, 4, 'TileSpacing','tight', 'Padding','compact');

for b = manualVals
    % get mask for this behavior
    validLabels = find(manualLabels == b);

    pyrPool = [];
    intPool = [];

    shiftPyr = [];
    shiftInt = [];

    for ch = channelsToUse
        trIdxs = validTransitionsCell{ch};

        mask = ismember(trIdxs, validTransitions(validLabels));

        pyrUnshift = squeeze(mean(pyrCxWinCell{ch}(mask,:,:), 2, 'omitnan'));
        intUnshift = squeeze(mean(intCxWinCell{ch}(mask,:,:), 2, 'omitnan'));

        pyrPool = [pyrPool; pyrUnshift];
        intPool = [intPool; intUnshift];

        % get first full-shift trace as a row
        shift1Pyr = reshape(squeeze(mean(mean(pyrCxWinShiftedCell{ch}(mask,:,:), 2, 'omitnan'), 1, 'omitnan')), 1, []);
        shift1Int = reshape(squeeze(mean(mean(intCxWinShiftedCell{ch}(mask,:,:), 2, 'omitnan'), 1, 'omitnan')), 1, []);

        % get remaining shifts as row vectors
        pyrShiftCells = pyrCxWinShiftedMeanCell(ch, :);
        intShiftCells = intCxWinShiftedMeanCell(ch, :);

        % concatenate 1st shift + 99 stored shifts (100 × timepoints)
        pyrAllShifts = vertcat(shift1Pyr, pyrShiftCells{:});
        intAllShifts = vertcat(shift1Int, intShiftCells{:});

        shiftPyr = [shiftPyr; pyrAllShifts];
        shiftInt = [shiftInt; intAllShifts];
    end

    [mPyr, sePyr] = computeAverages(pyrPool, 'pyr');
    [mInt, seInt] = computeAverages(intPool, 'int');

    pctPyr = prctile(shiftPyr, [2.5 97.5], 1);
    pctInt = prctile(shiftInt, [2.5 97.5], 1);

    nexttile(b+1); hold on;
    yyaxis left
    shadedErrorBar(tAxis, mPyr, sePyr, 'lineProps', {'b', 'LineWidth', 1.5});
    plot(tAxis, pctPyr(1,:), 'b--'); plot(tAxis, pctPyr(2,:), 'b--');
    ylabel('Pyramidal');

    yyaxis right
    shadedErrorBar(tAxis, mInt, seInt, 'lineProps', {'r', 'LineWidth', 1.5});
    plot(tAxis, pctInt(1,:), 'r--'); plot(tAxis, pctInt(2,:), 'r--');
    ylabel('Interneuron');

    title(sprintf('Manual %d', b));
    xlabel('Time (ms)');
end

sgtitle('Cortex Neural Activity by Manual Behavior (0–10)');
end
